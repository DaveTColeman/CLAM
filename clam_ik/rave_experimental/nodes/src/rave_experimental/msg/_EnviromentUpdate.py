"""autogenerated by genmsg_py from EnviromentUpdate.msg. Do not edit."""
import roslib.message
import struct


class EnviromentUpdate(roslib.message.Message):
  _md5sum = "f4507a3b88a2f180859a169173f77e45"
  _type = "rave_experimental/EnviromentUpdate"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string object_id
string xml_file
float32 x
float32 y
float32 z
float32 roll
float32 pitch
float32 yaw
bool camera_relative

"""
  __slots__ = ['object_id','xml_file','x','y','z','roll','pitch','yaw','camera_relative']
  _slot_types = ['string','string','float32','float32','float32','float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       object_id,xml_file,x,y,z,roll,pitch,yaw,camera_relative
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(EnviromentUpdate, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.object_id is None:
        self.object_id = ''
      if self.xml_file is None:
        self.xml_file = ''
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.camera_relative is None:
        self.camera_relative = False
    else:
      self.object_id = ''
      self.xml_file = ''
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.camera_relative = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.object_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.xml_file
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6fB.pack(_x.x, _x.y, _x.z, _x.roll, _x.pitch, _x.yaw, _x.camera_relative))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.object_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.xml_file = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.x, _x.y, _x.z, _x.roll, _x.pitch, _x.yaw, _x.camera_relative,) = _struct_6fB.unpack(str[start:end])
      self.camera_relative = bool(self.camera_relative)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.object_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.xml_file
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6fB.pack(_x.x, _x.y, _x.z, _x.roll, _x.pitch, _x.yaw, _x.camera_relative))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.object_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.xml_file = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.x, _x.y, _x.z, _x.roll, _x.pitch, _x.yaw, _x.camera_relative,) = _struct_6fB.unpack(str[start:end])
      self.camera_relative = bool(self.camera_relative)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_6fB = struct.Struct("<6fB")
