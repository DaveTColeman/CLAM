"""autogenerated by genmsg_py from control.msg. Do not edit."""
import roslib.message
import struct


class control(roslib.message.Message):
  _md5sum = "0149b3b7705b959288f41d7b73f9387a"
  _type = "rave_experimental/control"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 joint0
float32 joint1
float32 joint2
float32 joint3
float32 joint4
float32 joint5
float32 joint6

"""
  __slots__ = ['joint0','joint1','joint2','joint3','joint4','joint5','joint6']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       joint0,joint1,joint2,joint3,joint4,joint5,joint6
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(control, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.joint0 is None:
        self.joint0 = 0.
      if self.joint1 is None:
        self.joint1 = 0.
      if self.joint2 is None:
        self.joint2 = 0.
      if self.joint3 is None:
        self.joint3 = 0.
      if self.joint4 is None:
        self.joint4 = 0.
      if self.joint5 is None:
        self.joint5 = 0.
      if self.joint6 is None:
        self.joint6 = 0.
    else:
      self.joint0 = 0.
      self.joint1 = 0.
      self.joint2 = 0.
      self.joint3 = 0.
      self.joint4 = 0.
      self.joint5 = 0.
      self.joint6 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_7f.pack(_x.joint0, _x.joint1, _x.joint2, _x.joint3, _x.joint4, _x.joint5, _x.joint6))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.joint0, _x.joint1, _x.joint2, _x.joint3, _x.joint4, _x.joint5, _x.joint6,) = _struct_7f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_7f.pack(_x.joint0, _x.joint1, _x.joint2, _x.joint3, _x.joint4, _x.joint5, _x.joint6))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.joint0, _x.joint1, _x.joint2, _x.joint3, _x.joint4, _x.joint5, _x.joint6,) = _struct_7f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_7f = struct.Struct("<7f")
