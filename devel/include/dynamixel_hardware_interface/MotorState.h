/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/dave/ros/clam/src/dynamixel_hardware_interface/msg/MotorState.msg
 *
 */


#ifndef DYNAMIXEL_HARDWARE_INTERFACE_MESSAGE_MOTORSTATE_H
#define DYNAMIXEL_HARDWARE_INTERFACE_MESSAGE_MOTORSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dynamixel_hardware_interface
{
template <class ContainerAllocator>
struct MotorState_
{
  typedef MotorState_<ContainerAllocator> Type;

  MotorState_()
    : timestamp(0.0)
    , id(0)
    , target_position(0)
    , target_velocity(0)
    , position(0)
    , velocity(0)
    , torque_limit(0)
    , load(0)
    , moving(false)
    , voltage(0)
    , temperature(0)  {
    }
  MotorState_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , id(0)
    , target_position(0)
    , target_velocity(0)
    , position(0)
    , velocity(0)
    , torque_limit(0)
    , load(0)
    , moving(false)
    , voltage(0)
    , temperature(0)  {
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _target_position_type;
  _target_position_type target_position;

   typedef int32_t _target_velocity_type;
  _target_velocity_type target_velocity;

   typedef int32_t _position_type;
  _position_type position;

   typedef int32_t _velocity_type;
  _velocity_type velocity;

   typedef int32_t _torque_limit_type;
  _torque_limit_type torque_limit;

   typedef int32_t _load_type;
  _load_type load;

   typedef uint8_t _moving_type;
  _moving_type moving;

   typedef int32_t _voltage_type;
  _voltage_type voltage;

   typedef int32_t _temperature_type;
  _temperature_type temperature;




  typedef boost::shared_ptr< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct MotorState_

typedef ::dynamixel_hardware_interface::MotorState_<std::allocator<void> > MotorState;

typedef boost::shared_ptr< ::dynamixel_hardware_interface::MotorState > MotorStatePtr;
typedef boost::shared_ptr< ::dynamixel_hardware_interface::MotorState const> MotorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dynamixel_hardware_interface

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'dynamixel_hardware_interface': ['/home/dave/ros/clam/src/dynamixel_hardware_interface/msg'], 'std_msgs': ['/opt/ros/groovy/share/std_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "96055d7680f5f0b2177ce65f44ce437f";
  }

  static const char* value(const ::dynamixel_hardware_interface::MotorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x96055d7680f5f0b2ULL;
  static const uint64_t static_value2 = 0x177ce65f44ce437fULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamixel_hardware_interface/MotorState";
  }

  static const char* value(const ::dynamixel_hardware_interface::MotorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# all values are in encoder units unless otherwise specified\n\
\n\
float64 timestamp       # motor state is at this time\n\
\n\
int32 id                # motor id\n\
int32 target_position   # commanded position\n\
int32 target_velocity   # commanded velocity\n\
int32 position          # current position\n\
int32 velocity          # current velocity\n\
int32 torque_limit      # current torque limit\n\
int32 load              # current load - ratio of applied torque over maximum torque\n\
bool  moving            # whether the motor is currently in motion\n\
\n\
int32 voltage           # current voltage (V * 10)\n\
int32 temperature       # current temperature (degrees Celsius)\n\
\n\
\n\
";
  }

  static const char* value(const ::dynamixel_hardware_interface::MotorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.id);
      stream.next(m.target_position);
      stream.next(m.target_velocity);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.torque_limit);
      stream.next(m.load);
      stream.next(m.moving);
      stream.next(m.voltage);
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct MotorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamixel_hardware_interface::MotorState_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "target_position: ";
    Printer<int32_t>::stream(s, indent + "  ", v.target_position);
    s << indent << "target_velocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.target_velocity);
    s << indent << "position: ";
    Printer<int32_t>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.velocity);
    s << indent << "torque_limit: ";
    Printer<int32_t>::stream(s, indent + "  ", v.torque_limit);
    s << indent << "load: ";
    Printer<int32_t>::stream(s, indent + "  ", v.load);
    s << indent << "moving: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moving);
    s << indent << "voltage: ";
    Printer<int32_t>::stream(s, indent + "  ", v.voltage);
    s << indent << "temperature: ";
    Printer<int32_t>::stream(s, indent + "  ", v.temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIXEL_HARDWARE_INTERFACE_MESSAGE_MOTORSTATE_H
